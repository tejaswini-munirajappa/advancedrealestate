{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1be5ccb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Models trained and saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Load dataset\n",
    "data = pd.read_csv(\"C:\\\\Users\\\\mteja\\\\OneDrive\\\\Documents\\\\project\\\\updated_real_estate_dataset.csv\")\n",
    "\n",
    "# Define features and target\n",
    "X = data.drop(columns=[\"SalePrice\"])\n",
    "y = data[\"SalePrice\"]\n",
    "\n",
    "# Identify numeric and categorical features\n",
    "numeric_features = [\"SquareFootage\", \"NumRooms\", \"PropertyAge\", \"AmenitiesScore\",\n",
    "                    \"Latitude\", \"Longitude\", \"NeighborhoodQuality\", \"ProximityToAmenities\",\n",
    "                    \"HistoricalPriceTrend\", \"InterestRate\", \"ZoningRegulationScore\", \"CrimeRate\"]\n",
    "categorical_features = [\"Condition\"]\n",
    "\n",
    "# Preprocessing pipeline\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', StandardScaler(), numeric_features),\n",
    "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n",
    "    ]\n",
    ")\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train models\n",
    "rf_model = Pipeline(steps=[('preprocessor', preprocessor), ('model', RandomForestRegressor(n_estimators=100))])\n",
    "gbm_model = Pipeline(steps=[('preprocessor', preprocessor), ('model', GradientBoostingRegressor(n_estimators=100, learning_rate=0.1))])\n",
    "xgb_model = Pipeline(steps=[('preprocessor', preprocessor), ('model', XGBRegressor(n_estimators=100, learning_rate=0.1))])\n",
    "\n",
    "rf_model.fit(X_train, y_train)\n",
    "gbm_model.fit(X_train, y_train)\n",
    "xgb_model.fit(X_train, y_train)\n",
    "\n",
    "# Save models\n",
    "joblib.dump(rf_model, \"rf_model.pkl\")\n",
    "joblib.dump(gbm_model, \"gbm_model.pkl\")\n",
    "joblib.dump(xgb_model, \"xgb_model.pkl\")\n",
    "\n",
    "print(\"Models trained and saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "007c764a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, request, jsonify\n",
    "import pandas as pd\n",
    "import joblib\n",
    "\n",
    "# Initialize Flask app\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Load trained model (Random Forest by default)\n",
    "model = joblib.load(\"rf_model.pkl\")\n",
    "\n",
    "@app.route('/predict', methods=['POST'])\n",
    "def predict():\n",
    "    try:\n",
    "        data = request.get_json()\n",
    "        input_data = pd.DataFrame(data['input'])  # Convert JSON input to DataFrame\n",
    "        prediction = model.predict(input_data)  # Make prediction\n",
    "        return jsonify({'predicted_price': prediction.tolist()})\n",
    "    except Exception as e:\n",
    "        return jsonify({'error': str(e)}), 400\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64c3f97d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import requests\n",
    "\n",
    "st.title(\"üè° Real Estate Valuation Prediction\")\n",
    "\n",
    "# Define all required input fields\n",
    "square_footage = st.number_input(\"Enter Square Footage\", min_value=500, max_value=10000, value=1500)\n",
    "num_rooms = st.number_input(\"Enter Number of Rooms\", min_value=1, max_value=10, value=3)\n",
    "property_age = st.number_input(\"Enter Property Age\", min_value=0, max_value=100, value=10)\n",
    "amenities_score = st.number_input(\"Amenities Score\", min_value=0, max_value=10, value=5)\n",
    "latitude = st.number_input(\"Latitude\", value=37.7749)\n",
    "longitude = st.number_input(\"Longitude\", value=-122.4194)\n",
    "neighborhood_quality = st.number_input(\"Neighborhood Quality\", min_value=0, max_value=10, value=7)\n",
    "proximity_to_amenities = st.number_input(\"Proximity to Amenities\", min_value=0, max_value=10, value=6)\n",
    "historical_price_trend = st.number_input(\"Historical Price Trend\", min_value=0, max_value=10, value=5)\n",
    "interest_rate = st.number_input(\"Interest Rate (%)\", min_value=0.0, max_value=10.0, value=3.5, step=0.1)\n",
    "zoning_regulation_score = st.number_input(\"Zoning Regulation Score\", min_value=0, max_value=10, value=6)\n",
    "crime_rate = st.number_input(\"Crime Rate\", min_value=0, max_value=10, value=3)\n",
    "\n",
    "# Handle categorical input\n",
    "condition_options = [\"Poor\", \"Fair\", \"Good\", \"Excellent\"]\n",
    "condition = st.selectbox(\"Property Condition\", condition_options)\n",
    "\n",
    "# Convert categorical input to one-hot encoding format\n",
    "condition_dict = {cond: (1 if cond == condition else 0) for cond in condition_options}\n",
    "\n",
    "if st.button(\"Predict Property Value\"):\n",
    "    input_data = pd.DataFrame([[\n",
    "        square_footage, num_rooms, property_age, amenities_score,\n",
    "        latitude, longitude, neighborhood_quality, proximity_to_amenities,\n",
    "        historical_price_trend, interest_rate, zoning_regulation_score, crime_rate,\n",
    "        condition_dict[\"Poor\"], condition_dict[\"Fair\"], condition_dict[\"Good\"], condition_dict[\"Excellent\"]\n",
    "    ]], columns=[\n",
    "        \"SquareFootage\", \"NumRooms\", \"PropertyAge\", \"AmenitiesScore\",\n",
    "        \"Latitude\", \"Longitude\", \"NeighborhoodQuality\", \"ProximityToAmenities\",\n",
    "        \"HistoricalPriceTrend\", \"InterestRate\", \"ZoningRegulationScore\", \"CrimeRate\",\n",
    "        \"Condition_Poor\", \"Condition_Fair\", \"Condition_Good\", \"Condition_Excellent\"\n",
    "    ])\n",
    "\n",
    "    try:\n",
    "        response = requests.post(\"http://127.0.0.1:5000/predict\", json={'input': input_data.to_dict(orient='records')})\n",
    "        result = response.json()\n",
    "        st.success(f\"üí∞ Predicted Property Price: **${result['predicted_price'][0]:,.2f}**\")\n",
    "    except:\n",
    "        st.error(\"‚ùå Error: Could not connect to the prediction server.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1cbc9be",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
